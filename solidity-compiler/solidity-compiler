#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  build_date=""
  compiler_backend=""
  solc_version=""
  evm_version=""
  target_contracts=()
  out_dir=""
  work_dir=""
  dev_deps=""
  cache_clean=""
  color=""
  quiet=""
}

_requirements() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "GNU/Linux" ]]; then
    _check_cmd \
      "cpio"
    _check_cmd \
      "find" \
      "findutils"
  fi
  _check_cmd \
    "indent"
  _check_cmd \
    'node' \
    'nodejs'
  _check_cmd \
    'npx'
  _check_cmd \
    "sed"
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_node_path_get() {
  _get_lib || \
  npm \
    -g \
    list | \
    head \
      -n \
        1
}

_evm_version_set() {
  local \
    _config_path="${1}" \
    _version="${2}" \
    _config \
    _msg=()
  _msg=(
    "setting evm version"
    " '${_version}' in"
    "'${_config_path}'"
  )
  _msg_info \
    "${_msg[*]}"
  _config="$( \
    sed \
      "/solidity/a settings: {evmVersion: \"${_version}\",}," \
      "${_config_path}" | \
      indent \
        -kr)"
  echo \
    "${_config}" > \
    "${_config_path}"
  _msg_info \
    "new '${_config_path}':"
  cat \
    "${_config_path}"
}

_solc_version_set() {
  local \
    _config_path="${1}" \
    _version="${2}" \
    _config \
    _msg=()
  _msg=(
    "setting solc version"
    " '${_version}' in"
    "'${_config_path}'"
  )
  _msg_info \
    "${_msg[*]}"
  _config="$( \
    sed \
      "/solidity/a version: \"${_version}\"," \
      "${_config_path}" | \
      indent \
        -kr)"
  echo \
    "${_config}" > \
    "${_config_path}"
  _msg_info \
    "new '${_config_path}':"
  cat \
    "${_config_path}"
}

_hardhat_init() {
  local \
    _oldpwd \
    _node_path
  _oldpwd="$( \
    pwd)"
  _node_path="$( \
    _node_path_get)"
  _msg_info \
    "Node path is: ${_node_path}"
  cd \
    "${_project_dir}"
  echo \
    "3\n" | \
    NODE_PATH="${_node_path}" \
    npx \
      hardhat \
        init
  if [[ "${_solc_version}" != "auto" ]]; then
    _solc_version_set \
      "${_project_dir}/hardhat.config.js" \
      "${_solc_version}"
  fi
  if [[ "${_evm_version}" != "auto" ]]; then
    _evm_version_set \
      "${_project_dir}/hardhat.config.js" \
      "${_evm_version}"
  fi
  rm \
    -rf \
    "${_project_dir}/contracts/Lock.sol"
  cd \
    "${_oldpwd}"
}

_node_package_path_get() {
  local \
    _pkg="${1}" \
    _msg=() \
    _local_node_path \
    _node_path \
    _oldpwd \
    _pkg_path \
    _os
  _os="$( \
    uname \
      -o)"
  _node_path="$( \
    _node_path_get)/node_modules"
  _package="${_pkg}"
  _msg=(
    "looking for '${_pkg}'"
    "in local system node"
    "tree '${_node_path}'"
  )
  _msg_info \
    "${_msg[*]}"
  _pkg_path="${_node_path}/${_pkg}"
  if [ -d "${_pkg_path}" ]; then
    _msg_info \
      "found ${_pkg_path} in system tree"
    # When installing from a local directory it seems
    # npm tries to change permissions of the directory,
    # so if trying to install a package from the local
    # system node module directory in an non-Android
    # environment that's not possible.
    # Wild.
    # I suppose this should be reported because it doesn't
    # seem at all something one would ever want to do,
    # yet it seems reasonable installing packages
    # from the system node modules tree.
    if [[ "${_os}" == "GNU/Linux" ]]; then
      _local_node_path="${_work_dir}/pkgs"
      _msg=(
        "copying package in local"
        "directory tree at"
        "'${_local_node_path}'"
      )
      _msg_info \
        "${_msg[*]}"
      mkdir \
        -p \
        "${_local_node_path}"
      _oldpwd="$( \
        pwd)"
      cd \
        "${_node_path}"
      find \
        . \
        -wholename \
          "./${_pkg}/*" \
        -type \
          f | \
        cpio \
          -p \
          -dum \
          "${_local_node_path}/."
      _pkg_path="${_local_node_path}/${_pkg}"
      cd \
        "${_oldpwd}"
    fi
    _package="${_pkg_path}"
  fi
  # echo \
  #   "${_package}"
}

_npm_install() {
  local \
    _project_dir="${1}" \
    _pkg="${2}" \
    _msg=() \
    _npm_cmd=() \
    _node_path \
    _oldpwd \
    _package \
    _pkg_path
  _node_path="$( \
    _node_path_get)/node_modules"
  _node_package_path_get \
    "${_pkg}"
  _oldpwd="$( \
    pwd)"
  cd \
    "${_project_dir}"
  _npm_cmd=(
    npm
      install
  )
  if [[ "${_dev_deps}" == "y" ]]; then
    _npm_cmd+=(
      --save-dev
    )
  elif [[ "${_dev_deps}" == "n" ]]; then
    _npm_cmd+=(
      --save-prod
    )
  fi
  _npm_cmd+=(
    "${_package}"
  )
  _msg=(
    "installing '${_package}'"
    "in '${_project_dir}'"
    "with node path '${_node_path}'"
  )
  _msg_info \
    "${_msg[*]}"
  export \
    NODE_PATH="${_node_path}"
  if [[ "${quiet}" == "y" ]]; then
    NODE_PATH="${_node_path}" \
    "${_npm_cmd[@]}" 1&> \
      /dev/null
  elif [[ "${quiet}" == "n" ]]; then
    "${_npm_cmd[@]}"
  fi
  cd \
    "${_oldpwd}"
}

_hardhat_project_init() {
  local \
    _project_dir="${1}" \
    _oldpwd \
    _os \
    _pkg \
    _pkgs=()
  _oldpwd="$( \
    pwd)"
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "GNU/Linux" ]]; then
    _pkgs+=(
      "@nomicfoundation/eslint-plugin-hardhat-internal-rules"
      "@nomicfoundation/eslint-plugin-slow-imports"
    )
  fi
  _pkgs+=(
    "hardhat"
  )
  if [[ "${_os}" == "Android" ]]; then
    _pkgs+=(
      "@nomicfoundation/solidity-analyzer-android-arm-eabi"
    )
  fi
  cd \
    "${_project_dir}"
  _msg_info \
    "setting up hardhat environment"
  for _pkg in "${_pkgs[@]}"; do
    _npm_install \
      "${_project_dir}" \
      "${_pkg}"
  done
  if [[ "${quiet}" == "y" ]]; then
    _hardhat_out="$( \
      _hardhat_init \
        "${_project_dir}")"
  elif [[ "${quiet}" == "n" ]]; then
    _hardhat_init \
      "${_project_dir}"
  fi
  cd \
    "${_oldpwd}"
}

_node_project_init() {
  local \
    _project_dir="${1}" \
    _npm_cmd=() \
    _node_path \
    _oldpwd
  _oldpwd="$( \
    pwd)"
  _node_path="$( \
    _node_path_get)/node_modules"
  cd \
    "${_project_dir}"
  _npm_cmd=(
    npm
      init
        -y
  )
  _msg_info \
    "setting up node project with node path '${_node_path}'"
  export \
    NODE_PATH="${_node_path}"
  if [[ "${quiet}" == "y" ]]; then
    NODE_PATH="${_node_path}" \
    "${_npm_cmd[@]}" 1&>/dev/null
  elif [[ "${quiet}" == "n" ]]; then
    NODE_PATH="${_node_path}" \
    "${_npm_cmd[@]}"
  fi
  cd \
    "${_oldpwd}"
}

_contract_bytecode_build() {
  local \
    _solc="${1}" \
    _evm_version="${2}" \
    _contract="${3}" \
    _output_json="${4}" \
    _solc_options=() \
    _msg=()
  if [[ "${_evm_version}" != "auto" ]]; then
    solc_options+=(
      --evm-version
        "${_evm_version}"
    )
  fi
  _solc_options+=(
    --combined-json
      "abi,asm,ast,bin,metadata"
    -o
      "bytecode"
  )
  _msg=(
    "building contract '${_contract}'"
    "bytecode using '${_solc}' with options"
    "'${_solc_options[@]}'"
  )
  _msg_info \
    "${_msg[*]}"
  "${_solc}" \
    "${_solc_options[@]}" \
    "${_contract}"
  mv \
    "bytecode/combined.json" \
    "${_output_json}"
  rmdir \
    "bytecode"
  _msg=(
    "contract bytecode correctly saved to"
    "'${_output_json}'"
  )
  _msg_info \
    "${_msg[*]}"
}


_contract_abi_build() {
  local \
    _solc="${1}" \
    _evm_version="${2}" \
    _contract="${3}" \
    _output_json="${4}" \
    _solc_options=() \
    _contract_name \
    _msg=()
  _contract_name="$( \
    basename \
      "${_contract%.sol}")"
  if [[ "${_evm_version}" != "auto" ]]; then
    solc_options+=(
      --evm-version
        "${_evm_version}"
    )
  fi
  _solc_options+=(
    --abi
    -o
      "abi"
  )
  _msg=(
    "building contract '${_contract}'"
    "ABI using '${_solc}' with options"
    "'${_solc_options[@]}'"
  )
  _msg_info \
    "${_msg[*]}"
  "${_solc}" \
    "${_solc_options[@]}" \
    "${_contract}"
  mv \
    "abi/${_contract_name}.abi" \
    "${_output_json}"
  rmdir \
    "abi"
  _msg=(
    "contract ABI correctly saved to"
    "'${_output_json}'"
  )
  _msg_info \
    "${_msg[*]}"
}

_solc_version_check() {
  local \
    _solc="${1}" \
    _version="${2}" \
    _msg=()
  if [[ "${_solc}" == "" ]]; then
    _msg=(
      "solc${_version} not found"
      "on this system"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_solc_build() {
  local \
    _solc_version="${1}" \
    _evm_version="${2}" \
    _work_dir="${3}" \
    _out_dir="${4}" \
    _msg=() \
    _solc \
    _solc_options=() \
    _contracts=() \
    _contract
  shift \
    4
  _contracts=(
    "$@"
  )
  _solc="$( \
    _solc_get \
      "${_solc_version}")"
  _solc_version_check \
    "${_solc}" \
    "${_solc_version}"
  cp \
    -r \
    "${_contracts[@]}" \
    "${_work_dir}"
  for _contract in "${_contracts[@]}"; do
    _contract_name="$( \
      basename \
        "${_contract%.sol}")"
    _contract_abi_build \
      "${_solc}" \
      "${_evm_version}" \
      "${_contract}" \
      "${_work_dir}/${_contract_name}.abi.json"
    _contract_bytecode_build \
      "${_solc}" \
      "${_evm_version}" \
      "${_contract}" \
      "${_work_dir}/${_contract_name}.bytecode.json"
  done
  cp \
    -r \
    "${_work_dir}/"* \
    "${_out_dir}"
}

_project_init() {
  local \
    _project_dir="${1}" \
    _gyp_defines \
    _oldpwd
  _oldpwd="$( \
    pwd)"
  cd \
    "${_project_dir}"
  _gyp_defines="android_ndk_path=''"
  export \
    GYP_DEFINES="${_gyp_defines}" 
  _node_project_init \
    "${_project_dir}"
  _hardhat_project_init \
    "${_project_dir}"
  cd \
    "${_oldpwd}"
}

_project_build() {
  local \
    _project_dir="${1}" \
    _out_dir="${2}" \
    _oldpwd \
    _node_modules
  _oldpwd="$( \
    pwd)"
  _msg_info \
    "building contracts"
  cd \
    "${_project_dir}"
  mkdir \
    -p \
    contracts
  cp \
    -r \
    "${_target_contracts[@]}" \
    "contracts" || \
    true
  _node_path="${_project_dir}/node_modules"
  _msg_info \
    "running hardhat with node path '${_node_path}'"
  export \
    NODE_PATH="${_node_path}"
  NODE_PATH="${_node_path}" \
  npx \
    hardhat \
    compile
  if [ -d "artifacts" ]; then
    cp \
      -r \
      "artifacts/"* \
      "${_out_dir}"
  else
    _msg_error \
      "contract build failed" \
      0
    cd \
      "${_oldpwd}"
    exit \
      1
  fi
  _msg_info \
    "contract build successful"
  cd \
    "${_oldpwd}"
}

_solidity_compiler() {
  local \
    _compiler_backend="${1}" \
    _solc_version="${2}" \
    _evm_version="${3}" \
    _out_dir="${4}" \
    _work_dir="${5}" \
    _dev_deps="${6}" \
    _cache_clean="${7}" \
    _target_contracts=() \
    _oldpwd
  shift \
    7
  _target_contracts+=(
    "$@"
  )
  if [[ "${_work_dir}" == "" ]]; then
    _work_dir="$( \
      mktemp \
        -d)"
  fi
  _oldpwd="$( \
    pwd)"
  cd \
    "${_work_dir}"
  if [[ "${_compiler_backend}" == "solc" ]]; then
    _solc_build \
      "${_solc_version}" \
      "${_evm_version}" \
      "${_work_dir}" \
      "${_out_dir}" \
      "${_target_contracts[@]}"
  elif [[ "${_compiler_backend}" == "hardhat" ]]; then
    _project_init \
      "${_work_dir}" || \
      true
    _project_build \
      "${_work_dir}" \
      "${_out_dir}"
  fi
  cd \
    "${_oldpwd}"
  if [[ "${_cache_clean}" == "y" ]]; then
    rm \
      -rf -- \
      "${_work_dir}"
  fi
}

_out_dir_auto_detect(){
  local \
    _contract_dir
  if [[ "$(_get "target" "contracts")" != "" ]]; then
    _contract_dir="$( \
      dirname \
       "${target_contracts}")"
  else
    _contract_dir="$( \
      pwd)"
  fi
  echo \
    "${_contract_dir}"
}

_work_dir_auto_detect() {
  local \
    _cache_dir \
    _gid \
    _uid \
    _work_dir \
    _work_dir_name
  if [[ "$(_get \
             "work" \
             "dir")" == "" ]]; then
    _cache_dir="${HOME}/.cache/$(_get \
                                   "app" \
                                   "name")"
    _work_dir_name="$( \
      basename \
        "$(mktemp \
             -d)")"
    _work_dir="${_cache_dir}/${_work_dir_name}"
    mkdir \
      -p \
      "${_work_dir}"
  fi
  _gid="$( \
    id \
      -un)"
  _uid="$( \
    id \
      -un)"
  chown \
    -R \
    "${_uid}:${_gid}" \
    "${_work_dir}"
  chmod \
    -R \
    755 \
    "${_work_dir}"
  _msg_info \
    "no work dir specified, setting '${_work_dir}'"
  _set_override \
    "work" \
    "dir" \
    "${_work_dir}"
}

_solc_get() {
  local \
   _solc_version="${1}"  \
   _solc \
   _version
  _version="${_solc_version}"
  if [[ "${_solc_version}" == "auto" ]]; then
    _version=""
  fi
  _solc="$( \
    command \
      -v \
      "solc${_version}")"
  echo \
    "${_solc}"
}

_compiler_backend_auto_detect() {
  local \
    _backend \
    _msg=() \
    _solc_version \
    _solc
  _backend="solc"
  _solc_version="$( \
    _get \
      "solc" \
      "version")"
  _solc="$( \
    _solc_get \
      "${_solc_version}")"
  if [[ "${_solc}" == "" ]]; then
    _msg=(
      "'${_solc}' not found, setting"
      " 'hardhat' as backend"
    )
    _msg_info \
      "${_msg[*]}"
    _backend="hardhat"
  fi
  _set_override \
    "compiler" \
    "backend" \
    "${_backend}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "build" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "solc" \
    "version" \
    "auto"
  _set_override \
    "evm" \
    "version" \
    "auto"
  _compiler_backend_auto_detect
  _work_dir_auto_detect
  _set_override \
    "out" \
    "dir" \
    "$(_out_dir_auto_detect)"
  _set_override \
    "dev" \
    "deps" \
    "n"
  _set_override \
    "cache" \
    "clean" \
    "n"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Solidity compiler.

Usage:
  $(_get "app" "name")
    [options]
    [target_contract]
  options:
     -b <backend>         Compiler backend.
                          Default: '$(_get "compiler" "backend")'
     -C <solc_version>    Version of the solc compiler to use.
                          Default: '$(_get "evm" "version")'
     -e <evm_version>     Ethereum virtual machine version.
                          Default: '$(_get "evm" "version")'
     -o <out_dir>         Output directory.
                          Default: '$(_get "out" "dir")'
     -w <work_dir>        Work directory
                          Default: '$(_get "work" "dir")'
     -d                   Whether to install developer dependencies.
                          Default: '$(_get "dev" "deps")'
     -l                   Whether to delete the work directory
                          after a successful build.
                          Default: '$(_get "cache" "clean")'

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "               Build date:   $(_get "build" "date")"
  _msg_info "         Compiler backend:   $(_get "compiler" "backend")"
  _msg_info "             solc version:   $(_get "solc" "version")"
  _msg_info "              EVM version:   $(_get "evm" "version")"
  _msg_info "                  Out dir:   $(_get "out" "dir")"
  _msg_info "                 Work dir:   $(_get "work" "dir")"
  _msg_info "   Developer dependencies:   $(_get "dev" "deps")"
  _msg_info "              Cache clean:   $(_get "cache" "clean")"
  _msg_info "         Target contracts:   $(_get "target" "contracts")"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'b:C:e:o:w:dlcvh?' \
    arg; do
  case \
    "${arg}" in
    b) override_compiler_backend="${OPTARG}" ;;
    C) override_solc_version="${OPTARG}" ;;
    e) override_evm_version="${OPTARG}" ;;
    o) override_out_dir="$( \
         realpath \
           "${OPTARG}")" ;;
    w) override_work_dir="$( \
         realpath \
           "${OPTARG}")" ;;
    d) override_dev_deps="y" ;;
    l) override_cache_clean="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
for _contract in "$@"; do
  target_contracts+=(
    "$(realpath \
         "${_contract}")"
  )
done
if [[ "${target_contracts[*]}" ==  "" ]]; then
  _msg_error \
    "no contracts given" \
    0
  _set_overrides
  _usage \
    1
fi
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$(_get \
       "compiler" \
       "backend")"
  "$(_get \
       "solc" \
       "version")"
  "$(_get \
       "evm" \
       "version")"
  "$(realpath \
       "$(_get \
           "out" \
           "dir")")"
  "$(realpath \
      "$(_get \
           "work" \
           "dir")")"
  "$(_get \
       "dev" \
       "deps")"
  "$(_get \
       "cache" \
       "clean")"
  "${target_contracts[@]}"
)
_solidity_compiler \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
