#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  build_date=""
  compiler_backend=""
  target_contracts=()
  out_dir=""
  work_dir=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'node' \
    'nodejs'
  _check_cmd \
    'npx'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_node_run() {
  local \
    _cmd="${1}" \
    _args=() \
    _node_path \
    _lib
  shift \
    1
  _args=(
    "$@"
  )
  _lib="$( \
    _get_lib)"
  _node_path="${_lib}/node_modules" 
  export \
    NODE_PATH="${_node_path}"
  NODE_PATH="${_node_path}" \
  node \
    "${_cmd}" \
      "${_args[@]}" || \
    true
}

_project_init() {
  local \
    _project_dir="${1}" \
    _oldpwd
  _oldpwd="$( \
    pwd)"
  cd \
    "${_project_dir}"
  npm \
    init \
      -y
  npm \
    install \
      --save-dev \
      hardhat
  echo \
    "\n\n\n" | \
    npx \
      hardhat \
        init
  tree \
    .
  cd \
    "${_oldpwd}"
  # rm \
  #   -rf \
  #   "${_project_dir}"
}

_solidity_compiler() {
  local \
    _compiler_backend="${1}" \
    _target_contracts=() \
    _project_dir \
    _command_args=() \
    _cmd \
    _args=() \
    _network_backend
  shift \
    1
  _target_contracts+=(
    "$@"
  )
  _project_dir="$( \
    mktemp \
      -d)"
  _project_init \
    "${_project_dir}"
  # _network_setup
  # if [[ "${_target_command}" == "get" ]]; then
  #   "_key_${_target_command}" \
  #     "${_target_key}"
  #   if [[ "${_target_key}" == "name" ]]; then
  #     return \
  #       0
  #   fi
  # fi
  # if [[ "${quiet}" != "y" ]]; then
  #   _args+=(
  #     -v
  #   )
  # fi
  # _node_run \
  #   "${_cmd}" \
  #   "${_args[@]}"
}

_out_dir_auto_detect(){
  local \
    _contract_dir
  if [[ "$(_get "target" "contracts")" != "" ]]; then
    _contract_dir="$( \
      dirname \
       "${target_contracts}")"
  else
    _contract_dir="$( \
      pwd)"
  fi
  echo \
    "${_contract_dir}"
}

_set_overrides() {
  _set_override \
    "build" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "compiler" \
    "backend" \
    "hardhat"
  _set_override \
    "work" \
    "dir" \
    "$(mktemp \
         -d)"
  _set_override \
    "out" \
    "dir" \
    "$(_out_dir_auto_detect)"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Solidity compiler.

Usage:
  $(_get "app" "name")
    [options]
    [target_contract]
  options:
     -b <backend>         Compiler backend
                          Default: '$(_get "compiler" "backend")'
     -o <out_dir>         Output directory
                          Default: '$(_get "out" "dir")'
     -w <work_dir>        Work directory
                          Default: '$(_get "work" "dir")'

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "               Build date:   $(_get "build" "date")"
  _msg_info "         Compiler backend:   $(_get "compiler" "backend")"
  _msg_info "                  Out dir:   $(_get "out" "dir")"
  _msg_info "                 Work dir:   $(_get "work" "dir")"
  _msg_info "         Target contracts:   $(_get "target" "contracts")"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'b:o:w:cvh?' \
    arg; do
  case \
    "${arg}" in
    b) override_compiler_backend="${OPTARG}" ;;
    o) override_out_dir="${OPTARG}" ;;
    w) override_work_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
target_contracts+=(
  "$@"
)
if [[ "${target_contracts[*]}" ==  "" ]]; then
  _msg_error \
    "no contracts given" \
    0
  _set_overrides
  _usage \
    1
fi
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$(_get \
       "compiler" \
       "backend")"
  "$(_get \
       "work" \
       "dir")"
  "$(_get \
       "out" \
       "dir")"
  "${target_contracts[@]}"
)
_solidity_compiler \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
