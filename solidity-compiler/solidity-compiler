#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  target_contracts=()
  out_dir=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'node' \
    'nodejs'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_wallet_address_cmd() {
  local \
    _command="${1}" \
    _lib
  _lib="$( \
    _get_lib)/evm-wallet"
  echo \
    "${_lib}/address-${_command}"
}

_node_run() {
  local \
    _cmd="${1}" \
    _args=() \
    _node_path \
    _lib
  shift \
    1
  _args=(
    "$@"
  )
  _lib="$( \
    _get_lib)"
  _node_path="${_lib}/node_modules" 
  export \
    NODE_PATH="${_node_path}"
  NODE_PATH="${_node_path}" \
  node \
    "${_cmd}" \
      "${_args[@]}" || \
    true
}

_network_setup() {
  if [[ "${_network}" == "gnosis" ]]; then
    _rpc="https://rpc.gnosischain.com"
    _network_backend="${_network}"
  elif [[ "${_network}" == "ethereum" ]]; then
    _network_backend="etherscan"
  else
    _network_backend="${_network}"
  fi
}

_api_key_read() {
  local \
    _path="${1}"
  if [ ! -e "${_path}" ]; then
    _msg_error \
      "service api key file '${_path}' not found" \
      1
  fi
  cat \
    "${_path}"
}

_key_get() {
  local \
    _key="${1}"
  if [[ "${_key}" == "address" ]]; then
    _cmd="$( \
      _wallet_address_cmd \
        "get")"
    _args+=(
      "${_wallet_seed}"
      "${_network_backend}"
      "${_api_key_path}"
    )
  elif [[ "${_key}" == "seed" ]]; then
    cat \
      "${_wallet_seed}"
    return \
      0
  elif [[ "${_key}" == "name" ]]; then
    echo \
      "${wallet_name}"
    return \
      0
  fi
}

_project_init() {
  local \
    _project_dir="${1}" \
    _oldpwd
  _oldpwd="$( \
    pwd)"
  cd \
    "${_project_dir}"
  npm \
    init \
      -y
  cd \
    "${_oldpwd}"
}

_solidity_compiler() {
  local \
    _compiler_backend="${1}" \
    _project_dir \
    _command_args=() \
    _cmd \
    _args=() \
    _network_backend
  shift \
    1
  _target_contracts+=(
    "$@"
  )
  _project_dir="$( \
    mktemp \
      -d)"
  _project_init \
    "${_project_dir}"
  # _network_setup
  # if [[ "${_target_command}" == "get" ]]; then
  #   "_key_${_target_command}" \
  #     "${_target_key}"
  #   if [[ "${_target_key}" == "name" ]]; then
  #     return \
  #       0
  #   fi
  # fi
  # if [[ "${quiet}" != "y" ]]; then
  #   _args+=(
  #     -v
  #   )
  # fi
  # _node_run \
  #   "${_cmd}" \
  #   "${_args[@]}"
}

_set_overrides() {
  _set_override \
    "build" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "compiler" \
    "backend" \
    "hardhat"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Solidity compiler.

Usage:
  $(_get "app" "name")
    [options]
    [target_contract]
  options:
     -b <backend>         Compiler backend
                          Default: '$(_get "compiler" "backend")'
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "               Build date:   $(_get "build" "date")"
  _msg_info "         Target contracts:   $(_get "target" "contracts")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'b:cvh?' \
    arg; do
  case \
    "${arg}" in
    b) override_backend="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
target_contracts+=(
  "$@"
)
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "${target_contracts[@]}"
)
_solidity_compiler \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
