#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  build_date=""
  compiler_backend=""
  target_contracts=()
  out_dir=""
  work_dir=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'node' \
    'nodejs'
  _check_cmd \
    'npx'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_node_path_get() {
  _get_lib || \
  npm \
    -g \
    list | \
    head \
      -n \
        1
}

_hardhat_init() {
  local \
    _oldpwd \
    _node_path
  _oldpwd="$( \
    pwd)"
  _node_path="$( \
    _node_path_get)"
  _msg_info \
    "Node path is: ${_node_path}"
  cd \
    "${_project_dir}"
  echo \
    "3\n" | \
    NODE_PATH="${_node_path}" \
    npx \
      hardhat \
        init
  rm \
    -rf \
    "contracts/Lock.sol"
  cd \
    "${_oldpwd}"
}

_node_package_path_get() {
 local \
     _pkg="${1}" \
     _package \
    _node_path \
    _pkg_path \
    _os
  _os="$( \
    uname \
      -o)"
  _node_path="$( \
    _node_path_get)"
  _package="${_pkg}"
  _pkg_path="${_node_path}/node_modules/${_pkg}"
  if [ -d "${_pkg_path}" ]; then
    _package="${_pkg_path}"
  fi
  # When installing from a local directory it seems
  # npm tries to change permissions of the directory,
  # so if trying to install a package from the local
  # system node module directory in an non-Android
  # environment that's not possible.
  # Wild.
  # I suppose this should be reported because it doesn't
  # seem at all something one would ever want to do,
  # yet it seems reasonable installing packages
  # from the system node modules tree.
  if [[ "${_os}" == "GNU/Linux" ]]; then
    mkdir \
      -p \
      "${_work_dir}/pkgs"
    cp \
      -r \
      "${_package}" \
      "${_work_dir}/pkgs"
    _package="${_work_dir}/pkgs/${_pkg}"
  fi
  echo \
    "${_package}"
}

_npm_install() {
  local \
    _project_dir="${1}" \
    _pkg="${2}" \
    _msg=() \
    _npm_cmd=() \
    _node_path \
    _oldpwd \
    _package
  _node_path="$( \
    _node_path_get)/node_modules"
  _package="$( \
    _node_package_path_get \
      "${_pkg}")"
  _oldpwd="$( \
    pwd)"
  cd \
    "${_project_dir}"
  _npm_cmd=(
    npm
      install
        --save-dev
      "${_package}"
  )
  _msg=(
    "installing '${_package}'"
    "in '${_project_dir}'"
    "with node path '${_node_path}'"
  )
  _msg_info \
    "${_msg[*]}"
  export \
    NODE_PATH="${_node_path}"
  if [[ "${quiet}" == "y" ]]; then
    NODE_PATH="${_node_path}" \
    "${_npm_cmd[@]}" 1&> \
      /dev/null
  elif [[ "${quiet}" == "n" ]]; then
    "${_npm_cmd[@]}"
  fi
  cd \
    "${_oldpwd}"
}

_hardhat_project_init() {
  local \
    _project_dir="${1}" \
    _oldpwd \
    _pkg \
    _pkgs=()
  _oldpwd="$( \
    pwd)"
  _pkgs=(
    "eslint-plugin-hardhat-internal-rules"
    "hardhat"
    "@nomicfoundation/solidity-analyzer-android-arm-eabi"
  )
  cd \
    "${_project_dir}"
  _msg_info \
    "setting up hardhat environment"
  for _pkg in "${_pkgs[@]}"; do
    _npm_install \
      "${_project_dir}" \
      "${_pkg}"
  done
  if [[ "${quiet}" == "y" ]]; then
    _hardhat_out="$( \
      _hardhat_init \
        "${_project_dir}")"
  elif [[ "${quiet}" == "n" ]]; then
    _hardhat_init \
      "${_project_dir}"
  fi
  cd \
    "${_oldpwd}"
}

_node_project_init() {
  local \
    _project_dir="${1}" \
    _npm_cmd=() \
    _node_path \
    _oldpwd
  _oldpwd="$( \
    pwd)"
  _node_path="$( \
    _node_path_get)/node_modules"
  cd \
    "${_project_dir}"
  _npm_cmd=(
    npm
      init
        -y
  )
  _msg_info \
    "setting up node project with node path '${_node_path}'"
  export \
    NODE_PATH="${_node_path}"
  if [[ "${quiet}" == "y" ]]; then
    NODE_PATH="${_node_path}" \
    "${_npm_cmd[@]}" 1&>/dev/null
  elif [[ "${quiet}" == "n" ]]; then
    NODE_PATH="${_node_path}" \
    "${_npm_cmd[@]}"
  fi
  cd \
    "${_oldpwd}"
}

_project_init() {
  local \
    _project_dir="${1}" \
    _gyp_defines \
    _oldpwd
  _oldpwd="$( \
    pwd)"
  cd \
    "${_project_dir}"
  _gyp_defines="android_ndk_path=''"
  export \
    GYP_DEFINES="${_gyp_defines}" 
  _node_project_init \
    "${_project_dir}"
  _hardhat_project_init \
    "${_project_dir}"
  cd \
    "${_oldpwd}"
}

_project_build() {
  local \
    _project_dir="${1}" \
    _out_dir="${2}" \
    _oldpwd \
    _node_modules
  _oldpwd="$( \
    pwd)"
  _msg_info \
    "building contracts"
  cd \
    "${_project_dir}"
  mkdir \
    -p \
    contracts
  cp \
    -r \
    "${_target_contracts[@]}" \
    "contracts" || \
    true
  _node_path="${_project_dir}/node_modules"
  _msg_info \
    "running hardhat with node path '${_node_path}'"
  export \
    NODE_PATH="${_node_path}"
  NODE_PATH="${_node_path}" \
  npx \
    hardhat \
    compile
  if [ -d "artifacts" ]; then
    mv \
      "artifacts/"* \
      "${_out_dir}"
  else
    _msg_error \
      "contract build failed" \
      0
    cd \
      "${_oldpwd}"
    exit \
      1
  fi
  _msg_info \
    "contract build successful"
  cd \
    "${_oldpwd}"
}

_solidity_compiler() {
  local \
    _compiler_backend="${1}" \
    _out_dir="${2}" \
    _work_dir="${3}" \
    _target_contracts=() \
    _oldpwd
  shift \
    3
  _target_contracts+=(
    "$@"
  )
  if [[ "${_work_dir}" == "" ]]; then
    _work_dir="$( \
      mktemp \
        -d)"
  fi
  _oldpwd="$( \
    pwd)"
  cd \
    "${_work_dir}"
  _project_init \
    "${_work_dir}" || \
    true
  _project_build \
    "${_work_dir}" \
    "${_out_dir}"
  cd \
    "${_oldpwd}"
  rm \
    -rf \
    "${_work_dir}"
}

_out_dir_auto_detect(){
  local \
    _contract_dir
  if [[ "$(_get "target" "contracts")" != "" ]]; then
    _contract_dir="$( \
      dirname \
       "${target_contracts}")"
  else
    _contract_dir="$( \
      pwd)"
  fi
  echo \
    "${_contract_dir}"
}

_work_dir_auto_detect() {
  local \
    _cache_dir \
    _gid \
    _uid \
    _work_dir \
    _work_dir_name
  if [[ "$(_get \
             "work" \
             "dir")" == "" ]]; then
    _cache_dir="${HOME}/.cache/$(_get \
                                   "app" \
                                   "name")"
    _work_dir_name="$( \
      basename \
        "$(mktemp \
             -d)")"
    _work_dir="${_cache_dir}/${_work_dir_name}"
    mkdir \
      -p \
      "${_work_dir}"
  fi
  _gid="$( \
    id \
      -un)"
  _uid="$( \
    id \
      -un)"
  chown \
    -R \
    "${_uid}:${_gid}" \
    "${_work_dir}"
  chmod \
    -R \
    755 \
    "${_work_dir}"
  _msg_info \
    "no work dir specified, setting '${_work_dir}'"
  _set_override \
    "work" \
    "dir" \
    "${_work_dir}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "build" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "compiler" \
    "backend" \
    "hardhat"
  _work_dir_auto_detect
  _set_override \
    "out" \
    "dir" \
    "$(_out_dir_auto_detect)"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Solidity compiler.

Usage:
  $(_get "app" "name")
    [options]
    [target_contract]
  options:
     -b <backend>         Compiler backend
                          Default: '$(_get "compiler" "backend")'
     -o <out_dir>         Output directory
                          Default: '$(_get "out" "dir")'
     -w <work_dir>        Work directory
                          Default: '$(_get "work" "dir")'

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "               Build date:   $(_get "build" "date")"
  _msg_info "         Compiler backend:   $(_get "compiler" "backend")"
  _msg_info "                  Out dir:   $(_get "out" "dir")"
  _msg_info "                 Work dir:   $(_get "work" "dir")"
  _msg_info "         Target contracts:   $(_get "target" "contracts")"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'b:o:w:cvh?' \
    arg; do
  case \
    "${arg}" in
    b) override_compiler_backend="${OPTARG}" ;;
    o) override_out_dir="$( \
         realpath \
           "${OPTARG}")" ;;
    w) override_work_dir="$( \
         realpath \
           "${OPTARG}")" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
for _contract in "$@"; do
  target_contracts+=(
    "$(realpath \
         "${_contract}")"
  )
done
target_contracts+=(
  "$@"
)
if [[ "${target_contracts[*]}" ==  "" ]]; then
  _msg_error \
    "no contracts given" \
    0
  _set_overrides
  _usage \
    1
fi
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$(_get \
       "compiler" \
       "backend")"
  "$(realpath \
       "$(_get \
           "out" \
           "dir")")"
  "$(realpath \
      "$(_get \
           "work" \
           "dir")")"
  "${target_contracts[@]}"
)
_solidity_compiler \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
